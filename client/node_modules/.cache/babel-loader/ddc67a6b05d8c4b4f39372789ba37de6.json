{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useState } from 'react';\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch';\nimport { Location } from '../../lib/types';\nimport Townbox from '../Townbox'; //import mapImg from './assets/TuckerMap.jpg'\n\nimport descData from './assets/description.json';\nimport './index.css';\nimport svgData from './svgImageData.json';\nimport Map from './Map'; //import internal from 'stream'\n\nconst Test = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1);\n  const [height, setHeight] = useState(1);\n  const [selected, setSelect] = useState(null);\n  const [display, setDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const place of descData.descriptionArray) {\n      if (place.id === Location[area]) {\n        return place;\n      }\n    }\n\n    return null;\n  };\n\n  const close = () => {\n    setSelect(null);\n    setDisplay(false);\n  };\n\n  if (height) {\n    console.log(\"height\");\n  } // const selectArea = (area: Location) => {\n  //   selected === area ? setSelect(null) : setSelect(area)\n  //   setDisplay(!display)\n  // }\n  // const handleClick = (\n  //   event: any,\n  //   setTransform: any,\n  //   xtrans: number,\n  //   ytrans: number\n  // ) => {\n  //   //need to change this type\n  //   event.preventDefault()\n  //   const area = event.target.alt\n  //   selectArea(Location[area as keyof typeof Location])\n  //   setTransform(xtrans, ytrans, 2)\n  // }\n  // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(Map, {\n              scale: scale,\n              setTransform: setTransform,\n              setHeight: setHeight,\n              setDisplay: setDisplay,\n              display: display,\n              setSelect: setSelect,\n              selected: selected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: svgData.groupArray.map(area => {\n              console.log(selected);\n\n              if (selected) {\n                const selectedArea = descData.descriptionArray.find(x => x.id === '3');\n\n                if (selectedArea !== null) {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"townbox-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(Townbox, {\n                        headerColor: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerColor,\n                        headerText: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerText,\n                        captionText: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.captionText,\n                        showButton: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.showButton,\n                        close: () => {\n                          close();\n                          resetTransform();\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 110,\n                        columnNumber: 29\n                      }, this)\n                    }, \"test\", false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 106,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Test, \"MOoUOZUgjkojO032GW9pYF8Tq5I=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useState","TransformComponent","TransformWrapper","Location","Townbox","descData","svgData","Map","Test","scale","setScale","height","setHeight","selected","setSelect","display","setDisplay","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","place","descriptionArray","id","close","console","log","disabled","resetTransform","setTransform","groupArray","map","selectedArea","find","x","headerColor","headerText","captionText","showButton"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useState } from 'react'\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'\nimport { Location } from '../../lib/types'\nimport Townbox from '../Townbox'\n//import mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport './index.css'\nimport svgData from './svgImageData.json'\nimport Map from './Map'\n//import internal from 'stream'\n\nconst Test: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1)\n  const [height, setHeight] = useState(1)\n  const [selected, setSelect] = useState<Location | null>(null)\n  const [display, setDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  type HeaderColor = 'primary' | 'orange'\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    for (const place of descData.descriptionArray) {\n      if (place.id === Location[area]) {\n        return place\n      }\n    }\n    return null\n  }\n  const close = () => {\n    setSelect(null)\n    setDisplay(false)\n  }\n\n  if (height) {\n    console.log(\"height\")\n  }\n\n  // const selectArea = (area: Location) => {\n  //   selected === area ? setSelect(null) : setSelect(area)\n  //   setDisplay(!display)\n  // }\n\n  // const handleClick = (\n  //   event: any,\n  //   setTransform: any,\n  //   xtrans: number,\n  //   ytrans: number\n  // ) => {\n  //   //need to change this type\n  //   event.preventDefault()\n  //   const area = event.target.alt\n  //   selectArea(Location[area as keyof typeof Location])\n  //   setTransform(xtrans, ytrans, 2)\n  // }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <>\n      <div>\n        <TransformWrapper\n          doubleClick={{ disabled: true }}\n          wheel={{ disabled: true }}\n          initialScale={1}\n        >\n          {({ resetTransform, setTransform }) => (\n            <>\n              <TransformComponent>\n                <Map\n                  scale={scale}\n                  setTransform={setTransform}\n                  setHeight={setHeight}\n                  setDisplay={setDisplay}\n                  display={display}\n                  setSelect={setSelect}\n                  selected={selected}\n                />\n              </TransformComponent>\n\n              <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                {svgData.groupArray.map(area => {\n                  console.log(selected)\n                  if (selected) {\n                    const selectedArea = descData.descriptionArray.find(x => x.id === '3')\n        \n\n                    if (selectedArea !== null ) {\n                      return (\n                        <>\n                          <div\n                            key=\"test\"\n                            className='townbox-wrapper'\n                          >\n                            <Townbox\n                              headerColor={\n                                selectedArea?.headerColor as HeaderColor\n                              }\n                              headerText={selectedArea?.headerText}\n                              captionText={selectedArea?.captionText}\n                              showButton={selectedArea?.showButton}\n                              close={() => {\n                                close()\n                                resetTransform()\n                              }}\n                            />\n                          </div>\n                        </>\n                      )\n                    }\n                  }\n                })}\n              </div>\n            </>\n          )}\n        </TransformWrapper>\n      </div>\n    </>\n  )\n}\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}