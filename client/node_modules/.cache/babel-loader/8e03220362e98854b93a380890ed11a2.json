{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\nimport Townbox from '../Townbox';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'; //import Dialogue from 'Components/Dialogue'\n//import bananamanAvatar from 'lib/assets/banana.jpg'\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1);\n  const elementRef = useRef(null);\n  const [selected, setSelect] = useState(null);\n  const [scale, setScale] = useState(1);\n  const [display, setDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description;\n      }\n    }\n\n    return null;\n  };\n\n  const close = () => {\n    setSelect(null);\n    setDisplay(false);\n  };\n\n  const onMapClick = area => {\n    selected === area ? setSelect(null) : setSelect(area);\n    setDisplay(!display);\n  }; // eslint-disable-next-line\n\n\n  const handleClick = event => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    onMapClick(Location[area]);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Townbox, {\n              close: resetTransform\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => resetTransform(),\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: elementRef,\n              className: \"block w-full min-h-full items-stretch\",\n              style: {\n                minHeight: '900px'\n              },\n              children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"svgrow\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: mapImg,\n                  alt: \"Tucker Island Map\",\n                  useMap: \"#tuckerislandmap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n                  name: \"tuckerislandmap\",\n                  children: svgData.groupArray.map(location => {\n                    if (location.coords) {\n                      // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n                      // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                      // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                      //scaling by 10 seems to give better views of the locations\n                      const xtrans = parseInt(location.xtrans) * scale * 10;\n                      const ytrans = parseInt(location.ytrans) * scale * 10;\n                      const scaledCoords = location.coords.map(coord => coord * scale);\n                      const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n                      return /*#__PURE__*/_jsxDEV(\"area\", {\n                        alt: location.id,\n                        onClick: e => {\n                          handleClick(e);\n                          setTransform(-xtrans, -ytrans, 2);\n                        },\n                        href: location.id,\n                        coords: scaledCoords.join(),\n                        className: className,\n                        shape: \"poly\"\n                      }, location.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 115,\n                        columnNumber: 25\n                      }, this);\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `full-page-wrapper ${display ? '' : 'none'}`,\n      children: svgData.groupArray.map(area => {\n        if (selected !== null && area.coords) {\n          const selectedArea = getAreaDescription(selected);\n          console.log(selectedArea);\n\n          if (selectedArea !== null && selectedArea.id === area.id) {\n            const header = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerText;\n            const caption = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.captionText;\n            const showButton = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.showButton;\n            const headerColor = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerColor;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"townbox-wrapper\",\n                children: /*#__PURE__*/_jsxDEV(Townbox, {\n                  headerColor: headerColor,\n                  headerText: header,\n                  captionText: caption,\n                  showButton: showButton,\n                  close: close\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 21\n                }, this)\n              }, selectedArea.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this)\n            }, void 0, false);\n          }\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Map, \"ipZTJZb8bxFajCFaxHwFiK2ctZ4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","mapImg","descData","Townbox","TransformWrapper","TransformComponent","Map","height","setHeight","elementRef","selected","setSelect","scale","setScale","display","setDisplay","current","clientHeight","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","description","descriptionArray","id","close","onMapClick","handleClick","event","preventDefault","target","alt","disabled","resetTransform","setTransform","minHeight","groupArray","map","location","coords","xtrans","parseInt","ytrans","scaledCoords","coord","className","e","join","selectedArea","console","log","header","headerText","caption","captionText","showButton","headerColor"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport Townbox from '../Townbox'\nimport {TransformWrapper, TransformComponent} from 'react-zoom-pan-pinch'\n//import Dialogue from 'Components/Dialogue'\n//import bananamanAvatar from 'lib/assets/banana.jpg'\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, setSelect] = useState<Location | null>(null)\n  const [scale, setScale] = useState(1)\n  const [display, setDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  type HeaderColor = 'primary' | 'orange';\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth/4961)\n    }\n    handleResize();\n    window.addEventListener('resize', handleResize)\n    },\n    []\n  )\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    for(const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description\n      }\n    }\n\n    return null\n  }\n  const close = () => {\n    setSelect(null) \n    setDisplay(false)\n  }\n  const onMapClick = (area: Location) => {\n    selected === area ? setSelect(null) : setSelect(area)\n    setDisplay(!display)\n  }\n  // eslint-disable-next-line\n  const handleClick = (event: any) => { //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    onMapClick(Location[area as keyof typeof Location])\n  }\n\n\n  // Data can be made from dev/svgParse.py\n  return (\n  <>\n    <div>\n      <TransformWrapper\n        doubleClick={{ disabled: true }}\n        wheel={{ disabled: true }}\n        initialScale={1}\n      >\n      {({ resetTransform, setTransform }) => (\n                <>\n                <div>\n                  <Townbox close={resetTransform} />\n                    <button\n                    onClick={() => resetTransform()}\n                  >\n                    Reset\n                  </button>\n                </div>  \n      <TransformComponent>\n      <div\n      ref={elementRef}\n      className='block w-full min-h-full items-stretch'\n      style={{minHeight:'900px'}}\n      >\n      {height === 0 ? null : (\n          <div className='svgrow'>\n            <img src={mapImg} alt=\"Tucker Island Map\" useMap=\"#tuckerislandmap\"/>\n\n            <map name=\"tuckerislandmap\">\n              {\n                svgData.groupArray.map(location => {\n                  if (location.coords){\n                   // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n                   // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                   // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                   //scaling by 10 seems to give better views of the locations\n                    const xtrans = parseInt(location.xtrans) * scale * 10\n                    const ytrans = parseInt(location.ytrans) * scale * 10\n\n                    const scaledCoords = location.coords.map(coord => coord*scale)\n                    const className = Location[location.id as keyof typeof Location] === selected\n                          ? 'map-selected'\n                          : 'map-unselected'\n                    return (\n                        <area \n                          key={location.id}\n                          alt={location.id}\n                          onClick={(e) => { handleClick(e); setTransform(-xtrans, -ytrans, 2)}}\n                          href={location.id}\n                          coords={scaledCoords.join()}\n                          className={className}\n                          shape=\"poly\"\n                        />\n                    )\n                  }\n                })\n              }\n            </map>\n        </div>\n      )}\n      \n    </div>\n    </TransformComponent>\n              </>\n              )}\n    </TransformWrapper>\n    </div>\n\n    <div className={`full-page-wrapper ${display ? '': 'none'}`}>\n      {\n        svgData.groupArray.map(area => {\n          if (selected !== null && area.coords){\n            const selectedArea = getAreaDescription(selected)\n            console.log(selectedArea)\n\n            if(selectedArea !== null && selectedArea.id === area.id) {\n              const header = selectedArea?.headerText\n              const caption = selectedArea?.captionText\n              const showButton = selectedArea?.showButton\n              const headerColor = selectedArea?.headerColor as HeaderColor;\n\n              return (\n                <>\n                  <div key={selectedArea.id} className=\"townbox-wrapper\">\n                    <Townbox \n                      headerColor={headerColor}\n                      headerText={header}\n                      captionText={caption}\n                      showButton = {showButton}\n                      close={close}\n                    />\n                  </div>\n                  </>\n              )\n            }\n          }\n        })\n      }\n    </div>\n    </>\n  )\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}