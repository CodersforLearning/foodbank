{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\nimport Dialogue from '../Dialogue';\nimport bananamanAvatar from 'lib/assets/banana.jpg';\nconst messages = ['Holee molee'];\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  const [scale, setScale] = useState(1);\n  const [display, changeDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n  //type HeaderColor = 'primary' | 'orange'\n\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description;\n      }\n    }\n\n    return null;\n  };\n  /*\n  const onClose = () => {\n    onSelect(null)\n    changeDisplay(false)\n  }*/\n\n\n  const onMapClick = area => {\n    selected === area ? onSelect(null) : onSelect(area);\n    changeDisplay(!display);\n  }; // eslint-disable-next-line\n\n\n  const handleClick = event => {\n    //need to change this type HTML MouseEvent?\n    event.preventDefault();\n    const area = event.target.alt;\n    onMapClick(Location[area]);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n      children: ({\n        resetTransform,\n        setTransform\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => resetTransform(),\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TransformComponent, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: elementRef,\n            className: \"block w-full min-h-full items-stretch\",\n            style: {\n              minHeight: '900px'\n            },\n            children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"svgrow\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: mapImg,\n                alt: \"Tucker Island Map\",\n                useMap: \"#tuckerislandmap\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n                name: \"tuckerislandmap\",\n                children: svgData.groupArray.map(location => {\n                  if (location.coords) {\n                    //const xtrans = parseInt(location.xtrans) * scale * 8; // I have no clue why everything is overscaled 8x\n                    // const ytrans = parseInt(location.ytrans) * scale * 8; // this is probably worth looking into\n                    // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                    // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                    //scaling by 10 seems to give better views of the locations\n                    console.log(location.xtrans);\n                    const xtrans = parseInt(location.xtrans) * scale * 10;\n                    const ytrans = parseInt(location.ytrans) * scale * 10;\n                    console.log(xtrans); //\n\n                    const scaledCoords = location.coords.map(coord => coord * scale);\n                    const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n                    return /*#__PURE__*/_jsxDEV(\"area\", {\n                      alt: location.id //onClick={handleClick}\n                      ,\n                      onClick: e => {\n                        handleClick(e);\n                        setTransform(-xtrans, -ytrans, 2);\n                      },\n                      href: location.id,\n                      coords: scaledCoords.join(),\n                      className: className,\n                      shape: \"poly\"\n                    }, location.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 29\n                    }, this);\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dialogue, {\n          messages: messages,\n          speaker: 'bananaman',\n          avatar: bananamanAvatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"oILqyrSxCQwmn4YWlP7PyqnzSVg=\");\n\n_c = Map;\nexport default Map;\n/*<Townbox\nheaderColor={headerColor}\nheaderText={header}\ncaptionText={caption}\nshowButton={showButton}\nclose={onClose}\n/>*/\n\n{\n  /* <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                 {svgData.groupArray.map(area => {\n                   if (selected !== null && area.coords) {\n                     const selectedArea = getAreaDescription(selected)\n                     console.log(selectedArea)\n                      if (selectedArea !== null && selectedArea.id === area.id) {\n                       \n  //                      const header = selectedArea?.headerText\n  //                      const caption = selectedArea?.captionText\n  //                     const showButton = selectedArea?.showButton\n   //                     const headerColor = selectedArea?.headerColor as HeaderColor\n                        return (\n                         \n                       )\n                     }\n                   }\n                 })}\n               </div> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","mapImg","descData","TransformWrapper","TransformComponent","Dialogue","bananamanAvatar","messages","Map","height","setHeight","elementRef","selected","onSelect","scale","setScale","display","changeDisplay","current","clientHeight","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","description","descriptionArray","id","onMapClick","handleClick","event","preventDefault","target","alt","resetTransform","setTransform","minHeight","groupArray","map","location","coords","console","log","xtrans","parseInt","ytrans","scaledCoords","coord","className","e","join"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'\nimport Dialogue from '../Dialogue'\nimport bananamanAvatar from 'lib/assets/banana.jpg'\n\nconst messages = ['Holee molee']\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, onSelect] = useState<Location | null>(null)\n  const [scale, setScale] = useState(1)\n  const [display, changeDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  //type HeaderColor = 'primary' | 'orange'\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description\n      }\n    }\n\n    return null\n  }\n\n  /*\n  const onClose = () => {\n    onSelect(null)\n    changeDisplay(false)\n  }*/\n\n  const onMapClick = (area: Location) => {\n    selected === area ? onSelect(null) : onSelect(area)\n    changeDisplay(!display)\n  }\n  // eslint-disable-next-line\n  const handleClick = (event: any) => {\n    //need to change this type HTML MouseEvent?\n    event.preventDefault()\n    const area = event.target.alt\n    onMapClick(Location[area as keyof typeof Location])\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <div>\n      <TransformWrapper>\n        {({ resetTransform, setTransform }) => (\n          <>\n            <div>\n              <button onClick={() => resetTransform()}>Reset</button>\n            </div>\n            <TransformComponent>\n              <div\n                ref={elementRef}\n                className='block w-full min-h-full items-stretch'\n                style={{ minHeight: '900px' }}\n              >\n                {height === 0 ? null : (\n                  <div className='svgrow'>\n                    <img\n                      src={mapImg}\n                      alt='Tucker Island Map'\n                      useMap='#tuckerislandmap'\n                    />\n\n                    <map name='tuckerislandmap'>\n                      {svgData.groupArray.map(location => {\n                        if (location.coords) {\n                          //const xtrans = parseInt(location.xtrans) * scale * 8; // I have no clue why everything is overscaled 8x\n                          // const ytrans = parseInt(location.ytrans) * scale * 8; // this is probably worth looking into\n\n                          // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                          // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                          //scaling by 10 seems to give better views of the locations\n                          console.log(location.xtrans)\n                          const xtrans = parseInt(location.xtrans) * scale * 10\n                          const ytrans = parseInt(location.ytrans) * scale * 10\n                          console.log(xtrans)\n                          //\n                          const scaledCoords = location.coords.map(\n                            coord => coord * scale\n                          )\n                          const className =\n                            Location[location.id as keyof typeof Location] ===\n                            selected\n                              ? 'map-selected'\n                              : 'map-unselected'\n                          return (\n                            <area\n                              key={location.id}\n                              alt={location.id}\n                              //onClick={handleClick}\n                              onClick={e => {\n                                handleClick(e)\n                                setTransform(-xtrans, -ytrans, 2)\n                              }}\n                              href={location.id}\n                              coords={scaledCoords.join()}\n                              className={className}\n                              shape='poly'\n                            />\n                          )\n                        }\n                      })}\n                    </map>\n                  </div>\n                )}\n              </div>\n\n              \n            </TransformComponent>\n            <Dialogue\n                          messages={messages}\n                          speaker={'bananaman'}\n                          avatar={bananamanAvatar}\n                        />\n          </>\n        )}\n      </TransformWrapper>\n    </div>\n  )\n}\n\nexport default Map\n/*<Townbox\nheaderColor={headerColor}\nheaderText={header}\ncaptionText={caption}\nshowButton={showButton}\nclose={onClose}\n/>*/\n\n\n\n\n{/* <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                {svgData.groupArray.map(area => {\n                  if (selected !== null && area.coords) {\n                    const selectedArea = getAreaDescription(selected)\n                    console.log(selectedArea)\n\n                    if (selectedArea !== null && selectedArea.id === area.id) {\n                      \n\n//                      const header = selectedArea?.headerText\n//                      const caption = selectedArea?.captionText\n //                     const showButton = selectedArea?.showButton\n\n //                     const headerColor = selectedArea?.headerColor as HeaderColor\n\n                      return (\n                        \n                      )\n                    }\n                  }\n                })}\n              </div> */}"]},"metadata":{},"sourceType":"module"}