{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useState } from 'react';\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch';\nimport { Location } from '../../lib/types';\nimport Townbox from '../Townbox'; //import mapImg from './assets/TuckerMap.jpg'\n\nimport descData from './assets/description.json';\nimport './index.css';\nimport svgData from './svgImageData.json';\nimport Map from './Map'; //import internal from 'stream'\n\nconst Test = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1);\n  const [height, setHeight] = useState(1);\n  const [selected, setSelect] = useState(null);\n  const [display, setDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const place of descData.descriptionArray) {\n      if (place.id === Location[area]) {\n        return place;\n      }\n    }\n\n    return null;\n  };\n\n  const close = () => {\n    setSelect(null);\n    setDisplay(false);\n  };\n\n  const selectArea = area => {\n    selected === area ? setSelect(null) : setSelect(area);\n    setDisplay(!display);\n  };\n\n  const handleClick = (event, setTransform, xtrans, ytrans) => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    selectArea(Location[area]);\n    setTransform(xtrans, ytrans, 2);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(Map, {\n              scale: scale,\n              setTransform: () => setTransform,\n              setHeight: () => setHeight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: svgData.groupArray.map(area => {\n              if (selected !== null && area.coords) {\n                const selectedArea = getAreaDescription(selected);\n\n                if (selectedArea !== null && selectedArea.id === area.id) {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"townbox-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(Townbox, {\n                        headerColor: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerColor,\n                        headerText: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerText,\n                        captionText: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.captionText,\n                        showButton: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.showButton,\n                        close: () => {\n                          close();\n                          resetTransform();\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 98,\n                        columnNumber: 29\n                      }, this)\n                    }, selectedArea.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 94,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Test, \"MOoUOZUgjkojO032GW9pYF8Tq5I=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useState","TransformComponent","TransformWrapper","Location","Townbox","descData","svgData","Map","Test","scale","setScale","height","setHeight","selected","setSelect","display","setDisplay","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","place","descriptionArray","id","close","selectArea","handleClick","event","setTransform","xtrans","ytrans","preventDefault","target","alt","disabled","resetTransform","groupArray","map","coords","selectedArea","headerColor","headerText","captionText","showButton"],"mappings":";;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,sBAArD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AAEA,MAAMC,IAAc,GAAG,MAAM;AAAA;;AAC3B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACa,QAAD,EAAWC,SAAX,IAAwBd,QAAQ,CAAkB,IAAlB,CAAtC;AAEA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAN2B,CAO3B;;AAIAD,EAAAA,SAAS,CAAC,MAAM;AACd,aAASkB,YAAT,GAAwB;AACtB,YAAMC,WAAW,GAAG,IAApB;AACA,YAAMC,cAAc,GAAG,IAAvB;AACA,YAAMC,WAAW,GACfC,MAAM,CAACC,UAAP,GAAoBH,cAApB,GAAqCE,MAAM,CAACC,UAA5C,GAAyDJ,WAD3D;AAEAR,MAAAA,QAAQ,CAACU,WAAW,GAAG,IAAf,CAAR;AACD;;AACDH,IAAAA,YAAY;AACZI,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCN,YAAlC;AACD,GAVQ,EAUN,EAVM,CAAT,CAX2B,CAuB3B;AACA;;AACA,QAAMO,kBAAkB,GAAIC,IAAD,IAAoB;AAE7C,SAAK,MAAMC,KAAX,IAAoBrB,QAAQ,CAACsB,gBAA7B,EAA+C;AAC7C,UAAID,KAAK,CAACE,EAAN,KAAazB,QAAQ,CAACsB,IAAD,CAAzB,EAAiC;AAC/B,eAAOC,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GARD;;AASA,QAAMG,KAAK,GAAG,MAAM;AAClBf,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHD;;AAIA,QAAMc,UAAU,GAAIL,IAAD,IAAoB;AACrCZ,IAAAA,QAAQ,KAAKY,IAAb,GAAoBX,SAAS,CAAC,IAAD,CAA7B,GAAsCA,SAAS,CAACW,IAAD,CAA/C;AACAT,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAHD;;AAKA,QAAMgB,WAAW,GAAG,CAClBC,KADkB,EAElBC,YAFkB,EAGlBC,MAHkB,EAIlBC,MAJkB,KAKf;AACH;AACAH,IAAAA,KAAK,CAACI,cAAN;AACA,UAAMX,IAAI,GAAGO,KAAK,CAACK,MAAN,CAAaC,GAA1B;AACAR,IAAAA,UAAU,CAAC3B,QAAQ,CAACsB,IAAD,CAAT,CAAV;AACAQ,IAAAA,YAAY,CAACC,MAAD,EAASC,MAAT,EAAiB,CAAjB,CAAZ;AACD,GAXD,CA3C2B,CAwD3B;;;AACA,sBACE;AAAA,2BACE;AAAA,6BACE,QAAC,gBAAD;AACE,QAAA,WAAW,EAAE;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SADf;AAEE,QAAA,KAAK,EAAE;AAAEA,UAAAA,QAAQ,EAAE;AAAZ,SAFT;AAGE,QAAA,YAAY,EAAE,CAHhB;AAAA,kBAKG,CAAC;AAAEC,UAAAA,cAAF;AAAkBP,UAAAA;AAAlB,SAAD,kBACC;AAAA,kCACE,QAAC,kBAAD;AAAA,mCACA,QAAC,GAAD;AAAK,cAAA,KAAK,EAAExB,KAAZ;AAAmB,cAAA,YAAY,EAAE,MAAMwB,YAAvC;AAAqD,cAAA,SAAS,EAAE,MAAMrB;AAAtE;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE;AAAK,YAAA,SAAS,EAAG,qBAAoBG,OAAO,GAAG,EAAH,GAAQ,MAAO,EAA3D;AAAA,sBACGT,OAAO,CAACmC,UAAR,CAAmBC,GAAnB,CAAuBjB,IAAI,IAAI;AAC9B,kBAAIZ,QAAQ,KAAK,IAAb,IAAqBY,IAAI,CAACkB,MAA9B,EAAsC;AACpC,sBAAMC,YAAY,GAAGpB,kBAAkB,CAACX,QAAD,CAAvC;;AAEA,oBAAI+B,YAAY,KAAK,IAAjB,IAAyBA,YAAY,CAAChB,EAAb,KAAoBH,IAAI,CAACG,EAAtD,EAA0D;AACxD,sCACE;AAAA,2CACE;AAEE,sBAAA,SAAS,EAAC,iBAFZ;AAAA,6CAIE,QAAC,OAAD;AACE,wBAAA,WAAW,EAAEgB,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEC,WAD7B;AAEE,wBAAA,UAAU,EAAED,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEE,UAF5B;AAGE,wBAAA,WAAW,EAAEF,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEG,WAH7B;AAIE,wBAAA,UAAU,EAAEH,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEI,UAJ5B;AAKE,wBAAA,KAAK,EAAE,MAAM;AACXnB,0BAAAA,KAAK;AACLW,0BAAAA,cAAc;AACf;AARH;AAAA;AAAA;AAAA;AAAA;AAJF,uBACOI,YAAY,CAAChB,EADpB;AAAA;AAAA;AAAA;AAAA;AADF,mCADF;AAmBD;AACF;AACF,aA1BA;AADH;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiDD,CA1GD;;GAAMpB,I;;KAAAA,I;AA4GN,eAAeA,IAAf","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useState } from 'react'\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'\nimport { Location } from '../../lib/types'\nimport Townbox from '../Townbox'\n//import mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport './index.css'\nimport svgData from './svgImageData.json'\nimport Map from './Map'\n//import internal from 'stream'\n\nconst Test: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1)\n  const [height, setHeight] = useState(1)\n  const [selected, setSelect] = useState<Location | null>(null)\n\n  const [display, setDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  type HeaderColor = 'primary' | 'orange'\n\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n\n    for (const place of descData.descriptionArray) {\n      if (place.id === Location[area]) {\n        return place\n      }\n    }\n    return null\n  }\n  const close = () => {\n    setSelect(null)\n    setDisplay(false)\n  }\n  const selectArea = (area: Location) => {\n    selected === area ? setSelect(null) : setSelect(area)\n    setDisplay(!display)\n  }\n\n  const handleClick = (\n    event: any,\n    setTransform: any,\n    xtrans: number,\n    ytrans: number\n  ) => {\n    //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    selectArea(Location[area as keyof typeof Location])\n    setTransform(xtrans, ytrans, 2)\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <>\n      <div>\n        <TransformWrapper\n          doubleClick={{ disabled: true }}\n          wheel={{ disabled: true }}\n          initialScale={1}\n        >\n          {({ resetTransform, setTransform }) => (\n            <>\n              <TransformComponent>\n              <Map scale={scale} setTransform={() => setTransform} setHeight={() => setHeight}/>\n              </TransformComponent>\n\n              <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                {svgData.groupArray.map(area => {\n                  if (selected !== null && area.coords) {\n                    const selectedArea = getAreaDescription(selected)\n\n                    if (selectedArea !== null && selectedArea.id === area.id) {\n                      return (\n                        <>\n                          <div\n                            key={selectedArea.id}\n                            className='townbox-wrapper'\n                          >\n                            <Townbox\n                              headerColor={selectedArea?.headerColor as HeaderColor}\n                              headerText={selectedArea?.headerText}\n                              captionText={selectedArea?.captionText}\n                              showButton={selectedArea?.showButton}\n                              close={() => {\n                                close()\n                                resetTransform()\n                              }}\n                            />\n                          </div>\n                        </>\n                      )\n                    }\n                  }\n                })}\n              </div>\n            </>\n          )}\n        </TransformWrapper>\n      </div>\n    </>\n  )\n}\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}