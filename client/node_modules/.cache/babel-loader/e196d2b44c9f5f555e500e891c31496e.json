{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\nimport Townbox from '../Townbox';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'; //import Dialogue from 'Components/Dialogue'\n//import bananamanAvatar from 'lib/assets/banana.jpg'\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1);\n  const elementRef = useRef(null);\n  const [selected, onSelect] = useState(null);\n  const [scale, setScale] = useState(1);\n  const [display, setDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description;\n      }\n    }\n\n    return null;\n  };\n\n  const close = () => {\n    onSelect(null);\n    setDisplay(false);\n  };\n\n  const onMapClick = area => {\n    selected === area ? onSelect(null) : onSelect(area);\n    setDisplay(!display);\n  }; // eslint-disable-next-line\n\n\n  const handleClick = event => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    onMapClick(Location[area]);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => resetTransform(),\n                children: \"Reset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TransformComponent, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: elementRef,\n                className: \"block w-full min-h-full items-stretch\",\n                style: {\n                  minHeight: '900px'\n                },\n                children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"svgrow\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: mapImg,\n                    alt: \"Tucker Island Map\",\n                    useMap: \"#tuckerislandmap\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n                    name: \"tuckerislandmap\",\n                    children: svgData.groupArray.map(location => {\n                      if (location.coords) {\n                        // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n                        // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                        // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                        //scaling by 10 seems to give better views of the locations\n                        const xtrans = parseInt(location.xtrans) * scale * 10;\n                        const ytrans = parseInt(location.ytrans) * scale * 10;\n                        const scaledCoords = location.coords.map(coord => coord * scale);\n                        const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n                        return /*#__PURE__*/_jsxDEV(\"area\", {\n                          alt: location.id,\n                          onClick: e => {\n                            handleClick(e);\n                            setTransform(-xtrans, -ytrans, 2);\n                          },\n                          href: location.id,\n                          coords: scaledCoords.join(),\n                          className: className,\n                          shape: \"poly\"\n                        }, location.id, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 114,\n                          columnNumber: 31\n                        }, this);\n                      }\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: svgData.groupArray.map(area => {\n              if (selected !== null && area.coords) {\n                const selectedArea = getAreaDescription(selected);\n                console.log(selectedArea);\n\n                if (selectedArea !== null && selectedArea.id === area.id) {\n                  const header = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerText;\n                  const caption = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.captionText;\n                  const showButton = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.showButton;\n                  const headerColor = selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerColor;\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"townbox-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(Townbox, {\n                        headerColor: headerColor,\n                        headerText: header,\n                        captionText: caption,\n                        showButton: showButton\n                        /* eslint-disable @typescript-eslint/no-unused-vars */\n                        ,\n                        close: resetTransform\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 29\n                      }, this)\n                    }, selectedArea.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Map, \"p+DzJjP/4K7K15qMIjxTv8jCG2w=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","mapImg","descData","Townbox","TransformWrapper","TransformComponent","Map","height","setHeight","elementRef","selected","onSelect","scale","setScale","display","setDisplay","current","clientHeight","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","description","descriptionArray","id","close","onMapClick","handleClick","event","preventDefault","target","alt","disabled","resetTransform","setTransform","minHeight","groupArray","map","location","coords","xtrans","parseInt","ytrans","scaledCoords","coord","className","e","join","selectedArea","console","log","header","headerText","caption","captionText","showButton","headerColor"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport Townbox from '../Townbox'\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'\n//import Dialogue from 'Components/Dialogue'\n//import bananamanAvatar from 'lib/assets/banana.jpg'\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, onSelect] = useState<Location | null>(null)\n  const [scale, setScale] = useState(1)\n  const [display, setDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  type HeaderColor = 'primary' | 'orange'\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    for (const description of descData.descriptionArray) {\n      if (description.id === Location[area]) {\n        return description\n      }\n    }\n\n    return null\n  }\n  const close = () => {\n    onSelect(null)\n    setDisplay(false)\n  }\n  const onMapClick = (area: Location) => {\n    selected === area ? onSelect(null) : onSelect(area)\n    setDisplay(!display)\n  }\n  // eslint-disable-next-line\n  const handleClick = (event: any) => {\n    //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    onMapClick(Location[area as keyof typeof Location])\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <>\n      <div>\n        <TransformWrapper\n          doubleClick={{ disabled: true }}\n          wheel={{ disabled: true }}\n          initialScale={1}\n        >\n          {({ resetTransform, setTransform }) => (\n            <><>\n              <div>\n                <button onClick={() => resetTransform()}>Reset</button>\n              </div>\n              <TransformComponent>\n                <div\n                  ref={elementRef}\n                  className='block w-full min-h-full items-stretch'\n                  style={{ minHeight: '900px' }}\n                >\n                  {height === 0 ? null : (\n                    <div className='svgrow'>\n                      <img\n                        src={mapImg}\n                        alt='Tucker Island Map'\n                        useMap='#tuckerislandmap' />\n\n                      <map name='tuckerislandmap'>\n                        {svgData.groupArray.map(location => {\n                          if (location.coords) {\n                            // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n                            // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                            // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                            //scaling by 10 seems to give better views of the locations\n                            const xtrans = parseInt(location.xtrans) * scale * 10\n                            const ytrans = parseInt(location.ytrans) * scale * 10\n\n                            const scaledCoords = location.coords.map(\n                              coord => coord * scale\n                            )\n                            const className = Location[location.id as keyof typeof Location] ===\n                              selected\n                              ? 'map-selected'\n                              : 'map-unselected'\n                            return (\n                              <area\n                                key={location.id}\n                                alt={location.id}\n                                onClick={e => {\n                                  handleClick(e)\n                                  setTransform(-xtrans, -ytrans, 2)\n                                } }\n                                href={location.id}\n                                coords={scaledCoords.join()}\n                                className={className}\n                                shape='poly' />\n                            )\n                          }\n                        })}\n                      </map>\n                    </div>\n                  )}\n                </div>\n              </TransformComponent>\n            </><div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                {svgData.groupArray.map(area => {\n                  if (selected !== null && area.coords) {\n                    const selectedArea = getAreaDescription(selected)\n                    console.log(selectedArea)\n\n                    if (selectedArea !== null && selectedArea.id === area.id) {\n                      const header = selectedArea?.headerText\n                      const caption = selectedArea?.captionText\n                      const showButton = selectedArea?.showButton\n                      const headerColor = selectedArea?.headerColor as HeaderColor\n\n                      return (\n                        <>\n                          <div key={selectedArea.id} className='townbox-wrapper'>\n                            <Townbox\n                              headerColor={headerColor}\n                              headerText={header}\n                              captionText={caption}\n                              showButton={showButton}\n/* eslint-disable @typescript-eslint/no-unused-vars */close={resetTransform} />\n                          </div>\n                        </>\n                      )\n                    }\n                  }\n                })}\n              </div></>\n            \n          )}\n        </TransformWrapper>\n      </div>\n\n      \n    </>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}