{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useState } from 'react';\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'; //import { mutateInterface } from 'swr/dist/types'\n//import { Location } from '../../lib/types'\n\nimport { Townbox } from '../Townbox'; //, TownboxProps\n//import mapImg from './assets/TuckerMap.jpg'\n\nimport descData from './assets/description.json';\nimport './index.css'; //import svgData from './svgImageData.json'\n\nimport Map from './Map'; //import internal from 'stream'\n\nconst Test = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1);\n  const [height, setHeight] = useState(1);\n  const [select, setSelect] = useState(null);\n  const [display, setDisplay] = useState(false);\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(Map, {\n              scale: scale,\n              setTransform: setTransform,\n              setHeight: setHeight,\n              setDisplay: setDisplay,\n              display: display,\n              setSelect: setSelect,\n              selected: select\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: /*#__PURE__*/_jsxDEV(TownBoxWrapper, {\n              selected: select,\n              resetTransform: resetTransform,\n              setSelect: setSelect,\n              setDisplay: setDisplay\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Test, \"xl3rchD9GmDS/4TbQdci2Rihygo=\");\n\n_c = Test;\n\nconst TownBoxWrapper = ({\n  selected,\n  resetTransform,\n  setSelect,\n  setDisplay\n}) => {\n  const handleClose = () => {\n    setSelect(null);\n    setDisplay(false);\n    resetTransform();\n  };\n\n  if (selected) {\n    const selectedArea = descData.descriptionArray.find(x => x.id === selected);\n\n    if (selectedArea) {\n      const {\n        headerText,\n        captionText,\n        headerColor,\n        showButton,\n        id\n      } = selectedArea;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"townbox-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(Townbox, {\n            headerColor: headerColor,\n            headerText: headerText,\n            captionText: captionText,\n            showButton: showButton,\n            close: handleClose\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n  return null;\n};\n\n_c2 = TownBoxWrapper;\nexport default Test;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Test\");\n$RefreshReg$(_c2, \"TownBoxWrapper\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useState","TransformComponent","TransformWrapper","Townbox","descData","Map","Test","scale","setScale","height","setHeight","select","setSelect","display","setDisplay","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","disabled","resetTransform","setTransform","TownBoxWrapper","selected","handleClose","selectedArea","descriptionArray","find","x","id","headerText","captionText","headerColor","showButton"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useState } from 'react'\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'\n//import { mutateInterface } from 'swr/dist/types'\n//import { Location } from '../../lib/types'\nimport { Townbox } from '../Townbox' //, TownboxProps\n//import mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport './index.css'\n//import svgData from './svgImageData.json'\nimport Map from './Map'\n//import internal from 'stream'\n\ntype HeaderColor = 'primary' | 'orange'\n\ninterface TownBox {\n  headerColor: any\n  headerText: string\n  captionText: string\n  showButton: boolean\n  id: string\n}\n\nconst Test: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1)\n  const [height, setHeight] = useState(1)\n  const [select, setSelect] = useState(null)\n  const [display, setDisplay] = useState(false)\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  return (\n    <>\n      <div>\n        <TransformWrapper\n          doubleClick={{ disabled: true }}\n          wheel={{ disabled: true }}\n          initialScale={1}\n        >\n          {({ resetTransform, setTransform }) => (\n            <>\n              <TransformComponent>\n                <Map\n                  scale={scale}\n                  setTransform={setTransform}\n                  setHeight={setHeight}\n                  setDisplay={setDisplay}\n                  display={display}\n                  setSelect={setSelect}\n                  selected={select}\n                />\n              </TransformComponent>\n\n              <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                <TownBoxWrapper\n                  selected={select}\n                  resetTransform={resetTransform}\n                  setSelect={setSelect}\n                  setDisplay={setDisplay}\n                />\n              </div>\n            </>\n          )}\n        </TransformWrapper>\n      </div>\n    </>\n  )\n}\n\ninterface TownBoxProps {\n  selected: string | null\n  resetTransform: () => void\n  setSelect: (state: any) => void\n  setDisplay: (state: boolean) => void\n}\n\nconst TownBoxWrapper = ({\n  selected,\n  resetTransform,\n  setSelect,\n  setDisplay\n}: TownBoxProps) => {\n  const handleClose = () => {\n    setSelect(null)\n    setDisplay(false)\n    resetTransform()\n  }\n\n  if (selected) {\n    const selectedArea = descData.descriptionArray.find(x => x.id === selected)\n\n    if (selectedArea) {\n      const {\n        headerText,\n        captionText,\n        headerColor,\n        showButton,\n        id\n      }: TownBox | undefined = selectedArea\n\n      return (\n        <>\n          <div key={id} className='townbox-wrapper'>\n            <Townbox\n              headerColor={headerColor as HeaderColor}\n              headerText={headerText}\n              captionText={captionText}\n              showButton={showButton}\n              close={handleClose}\n            />\n          </div>\n        </>\n      )\n    }\n  }\n  return null\n}\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}