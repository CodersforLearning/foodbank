{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/Map.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport mapImg from './assets/TuckerMap.jpg';\nimport svgData from './svgImageData.json';\n\nconst Map = setTransform => {\n  _s();\n\n  const [scale, setScale] = useState(1);\n  const [height, setHeight] = useState(1);\n  const [selected, setSelect] = useState(null);\n  const elementRef = useRef(null);\n  const [display, setDisplay] = useState(false);\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n  // const close = () => {\n  //     setSelect(null)\n  //     setDisplay(false)\n  //   }\n\n  const selectArea = area => {\n    selected === area ? setSelect(null) : setSelect(area);\n    setDisplay(!display);\n  };\n\n  const handleClick = (event, setTransform, xtrans, ytrans) => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    selectArea(Location[area]);\n    setTransform(xtrans, ytrans, 2);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef,\n    className: \"block w-full min-h-full items-stretch\",\n    style: {\n      minHeight: '900px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: mapImg,\n        alt: \"Tucker Island Map\",\n        useMap: \"#tuckerislandmap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"tuckerislandmap\",\n        children: svgData.groupArray.map(location => {\n          if (location.coords) {\n            // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n            // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n            // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n            //scaling by 10 seems to give better views of the locations\n            const xtrans = parseInt(location.xtrans) * scale * 10;\n            const ytrans = parseInt(location.ytrans) * scale * 10;\n            const scaledCoords = location.coords.map(coord => coord * scale);\n            const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n            return /*#__PURE__*/_jsxDEV(\"area\", {\n              alt: location.id,\n              onClick: e => {\n                handleClick(e, setTransform, -xtrans, -ytrans);\n              },\n              href: location.id,\n              coords: scaledCoords.join(),\n              className: className,\n              shape: \"poly\"\n            }, location.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Map, \"jLBi3E4GpQuBzRQk9q+uyY68Y+U=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/Map.tsx"],"names":["React","useEffect","useRef","useState","mapImg","svgData","Map","setTransform","scale","setScale","height","setHeight","selected","setSelect","elementRef","display","setDisplay","current","clientHeight","selectArea","area","handleClick","event","xtrans","ytrans","preventDefault","target","alt","Location","minHeight","groupArray","map","location","coords","parseInt","scaledCoords","coord","className","id","e","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport mapImg from './assets/TuckerMap.jpg'\nimport svgData from './svgImageData.json'\n\nconst Map = (setTransform : any) => {\n    const [scale, setScale] = useState(1)\n    const [height, setHeight] = useState(1)\n    const [selected, setSelect] = useState<Location | null>(null)\n    const elementRef = useRef(null as null | HTMLDivElement)\n    const [display, setDisplay] = useState(false)\n\n\n    useEffect(() => {\n        if (elementRef?.current?.clientHeight) {\n          setHeight(elementRef?.current?.clientHeight)\n        }\n      }, []) //empty dependency array so it only runs once at render\n      \n    // const close = () => {\n    //     setSelect(null)\n    //     setDisplay(false)\n    //   }\n\n      const selectArea = (area: Location) => {\n        selected === area ? setSelect(null) : setSelect(area)\n        setDisplay(!display)\n      }\n    \n      const handleClick = (\n        event: any,\n        setTransform: any,\n        xtrans: number,\n        ytrans: number\n      ) => {\n        //need to change this type\n        event.preventDefault()\n        const area = event.target.alt\n        selectArea(Location[area as keyof typeof Location])\n        setTransform(xtrans, ytrans, 2)\n      }\n\n      return (\n  <div\n    ref={elementRef}\n    className='block w-full min-h-full items-stretch'\n    style={{ minHeight: '900px' }}\n  >\n      <div className='svgrow'>\n        <img\n                        src={mapImg}\n                        alt='Tucker Island Map'\n                        useMap='#tuckerislandmap'\n                      />\n\n        <map name='tuckerislandmap'>\n          {svgData.groupArray.map(location => {\n            if (location.coords) {\n              // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n              // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n              // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n              //scaling by 10 seems to give better views of the locations\n              const xtrans = parseInt(location.xtrans) * scale * 10\n              const ytrans = parseInt(location.ytrans) * scale * 10\n\n              const scaledCoords = location.coords.map(coord => coord * scale)\n              const className =\n                Location[location.id as keyof typeof Location] === selected\n                  ? 'map-selected'\n                  : 'map-unselected'\n              return (\n                <area\n                  key={location.id}\n                  alt={location.id}\n                  onClick={e => {\n                    handleClick(e, setTransform, -xtrans, -ytrans)\n                  }}\n                  href={location.id}\n                  coords={scaledCoords.join()}\n                  className={className}\n                  shape='poly'\n                />\n              )\n            }\n          })}\n        </map>\n      </div>\n  </div>)\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}