{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/Map.tsx\";\nimport React from 'react';\nimport mapImg from './assets/TuckerMap.jpg';\nimport svgData from './svgImageData.json';\n\nconst MapImage = ({\n  scale,\n  setTransform,\n  setDisplay,\n  selected,\n  setSelect\n}) => {\n  const handleClick = (event, setTransform, xtrans, ytrans) => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    selected === area ? setSelect(null) : setSelect(area);\n    setDisplay(true);\n    setTransform(xtrans, ytrans, 2);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"block w-full min-h-full items-stretch\",\n    style: {\n      minHeight: '900px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svgrow\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: mapImg,\n        alt: \"Tucker Island Map\",\n        useMap: \"#tuckerislandmap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"tuckerislandmap\",\n        children: svgData.groupArray.map(location => {\n          if (location.coords) {\n            // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n            // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n            // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n            //scaling by 10 seems to give better views of the locations\n            const xtrans = parseInt(location.xtrans) * scale * 10;\n            const ytrans = parseInt(location.ytrans) * scale * 10;\n            const scaledCoords = location.coords.map(coord => coord * scale);\n            const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n            return /*#__PURE__*/_jsxDEV(\"area\", {\n              alt: location.id,\n              onClick: e => {\n                handleClick(e, setTransform, -xtrans, -ytrans);\n              },\n              href: location.id,\n              coords: scaledCoords.join(),\n              className: className,\n              shape: \"poly\"\n            }, location.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MapImage;\nexport default MapImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapImage\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/Map.tsx"],"names":["React","mapImg","svgData","MapImage","scale","setTransform","setDisplay","selected","setSelect","handleClick","event","xtrans","ytrans","preventDefault","area","target","alt","minHeight","groupArray","map","location","coords","parseInt","scaledCoords","coord","className","Location","id","e","join"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAWA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,KADgB;AAEhBC,EAAAA,YAFgB;AAGhBC,EAAAA,UAHgB;AAIhBC,EAAAA,QAJgB;AAKhBC,EAAAA;AALgB,CAAD,KAMD;AAEd,QAAMC,WAAW,GAAG,CAClBC,KADkB,EAElBL,YAFkB,EAGlBM,MAHkB,EAIlBC,MAJkB,KAKf;AACH;AACAF,IAAAA,KAAK,CAACG,cAAN;AACA,UAAMC,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAaC,GAA1B;AACAT,IAAAA,QAAQ,KAAKO,IAAb,GAAoBN,SAAS,CAAC,IAAD,CAA7B,GAAsCA,SAAS,CAACM,IAAD,CAA/C;AACAR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAD,IAAAA,YAAY,CAACM,MAAD,EAASC,MAAT,EAAiB,CAAjB,CAAZ;AACD,GAZD;;AAcA,sBACE;AACE,IAAA,SAAS,EAAC,uCADZ;AAEE,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAFT;AAAA,2BAIE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEhB,MAAV;AAAkB,QAAA,GAAG,EAAC,mBAAtB;AAA0C,QAAA,MAAM,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAK,QAAA,IAAI,EAAC,iBAAV;AAAA,kBACGC,OAAO,CAACgB,UAAR,CAAmBC,GAAnB,CAAuBC,QAAQ,IAAI;AAClC,cAAIA,QAAQ,CAACC,MAAb,EAAqB;AACnB;AACA;AACA;AACA;AACA,kBAAMV,MAAM,GAAGW,QAAQ,CAACF,QAAQ,CAACT,MAAV,CAAR,GAA4BP,KAA5B,GAAoC,EAAnD;AACA,kBAAMQ,MAAM,GAAGU,QAAQ,CAACF,QAAQ,CAACR,MAAV,CAAR,GAA4BR,KAA5B,GAAoC,EAAnD;AAEA,kBAAMmB,YAAY,GAAGH,QAAQ,CAACC,MAAT,CAAgBF,GAAhB,CAAoBK,KAAK,IAAIA,KAAK,GAAGpB,KAArC,CAArB;AACA,kBAAMqB,SAAS,GACbC,QAAQ,CAACN,QAAQ,CAACO,EAAV,CAAR,KAAmDpB,QAAnD,GACI,cADJ,GAEI,gBAHN;AAIA,gCACE;AAEE,cAAA,GAAG,EAAEa,QAAQ,CAACO,EAFhB;AAGE,cAAA,OAAO,EAAEC,CAAC,IAAI;AACZnB,gBAAAA,WAAW,CAACmB,CAAD,EAAIvB,YAAJ,EAAkB,CAACM,MAAnB,EAA2B,CAACC,MAA5B,CAAX;AACD,eALH;AAME,cAAA,IAAI,EAAEQ,QAAQ,CAACO,EANjB;AAOE,cAAA,MAAM,EAAEJ,YAAY,CAACM,IAAb,EAPV;AAQE,cAAA,SAAS,EAAEJ,SARb;AASE,cAAA,KAAK,EAAC;AATR,eACOL,QAAQ,CAACO,EADhB;AAAA;AAAA;AAAA;AAAA,oBADF;AAaD;AACF,SA5BA;AADH;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CAhED;;KAAMxB,Q;AAkEN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport mapImg from './assets/TuckerMap.jpg'\nimport svgData from './svgImageData.json'\n\ninterface MapProps {\n  scale: number;\n  setTransform: (xtrans: number, ytrans: number, scale: number ) => void;\n  setDisplay: (display: boolean) => void;\n  display: boolean;\n  selected: any;\n  setSelect: (state: any) => void\n}\n\nconst MapImage = ({\n  scale,\n  setTransform,\n  setDisplay,\n  selected,\n  setSelect\n}: MapProps) => {\n\n  const handleClick = (\n    event: any,\n    setTransform: any,\n    xtrans: number,\n    ytrans: number\n  ) => {\n    //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    selected === area ? setSelect(null) : setSelect(area)\n    setDisplay(true)\n    setTransform(xtrans, ytrans, 2)\n  }\n\n  return (\n    <div\n      className='block w-full min-h-full items-stretch'\n      style={{ minHeight: '900px' }}\n    >\n      <div className='svgrow'>\n        <img src={mapImg} alt='Tucker Island Map' useMap='#tuckerislandmap' />\n\n        <map name='tuckerislandmap'>\n          {svgData.groupArray.map(location => {\n            if (location.coords) {\n              // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n              // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n              // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n              //scaling by 10 seems to give better views of the locations\n              const xtrans = parseInt(location.xtrans) * scale * 10\n              const ytrans = parseInt(location.ytrans) * scale * 10\n\n              const scaledCoords = location.coords.map(coord => coord * scale)\n              const className =\n                Location[location.id as keyof typeof Location] === selected\n                  ? 'map-selected'\n                  : 'map-unselected'\n              return (\n                <area\n                  key={location.id}\n                  alt={location.id}\n                  onClick={e => {\n                    handleClick(e, setTransform, -xtrans, -ytrans)\n                  }}\n                  href={location.id}\n                  coords={scaledCoords.join()}\n                  className={className}\n                  shape='poly'\n                />\n              )\n            }\n          })}\n        </map>\n      </div>\n    </div>\n  )\n}\n\nexport default MapImage\n"]},"metadata":{},"sourceType":"module"}