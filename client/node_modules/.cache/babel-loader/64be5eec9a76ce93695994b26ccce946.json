{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useState } from 'react';\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'; //import { Location } from '../../lib/types'\n\nimport { Townbox } from '../Townbox'; //import mapImg from './assets/TuckerMap.jpg'\n\nimport descData from './assets/description.json';\nimport './index.css';\nimport svgData from './svgImageData.json';\nimport Map from './Map'; //import internal from 'stream'\n\nconst Test = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1);\n  const [height, setHeight] = useState(1);\n  const [select, setSelect] = useState(null);\n  const [display, setDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  // const getAreaDescription = (area: Location) => {\n  //   for (const place of descData.descriptionArray) {\n  //     if (place.id === Location[area]) {\n  //       return place\n  //     }\n  //   }\n  //   return null\n  // }\n\n  const close = () => {\n    setSelect(null);\n    setDisplay(false);\n  };\n\n  if (height) {\n    console.log('height');\n  } // const selectArea = (area: Location) => {\n  //   selected === area ? setSelect(null) : setSelect(area)\n  //   setDisplay(!display)\n  // }\n  // const handleClick = (\n  //   event: any,\n  //   setTransform: any,\n  //   xtrans: number,\n  //   ytrans: number\n  // ) => {\n  //   //need to change this type\n  //   event.preventDefault()\n  //   const area = event.target.alt\n  //   selectArea(Location[area as keyof typeof Location])\n  //   setTransform(xtrans, ytrans, 2)\n  // }\n  // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(Map, {\n              scale: scale,\n              setTransform: setTransform,\n              setHeight: setHeight,\n              setDisplay: setDisplay,\n              display: display,\n              setSelect: setSelect,\n              selected: select\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: svgData.groupArray.map(() => {\n              if (select) {\n                const selectedArea = descData.descriptionArray.find(x => x.id === select);\n\n                if (selectedArea) {\n                  const {\n                    headerText,\n                    captionText,\n                    headerColor,\n                    showButton\n                  } = selectedArea;\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"townbox-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(Townbox, {\n                        headerColor: headerColor,\n                        headerText: headerText,\n                        captionText: captionText,\n                        showButton: showButton,\n                        close: () => {\n                          close();\n                          resetTransform();\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 120,\n                        columnNumber: 29\n                      }, this)\n                    }, 'test', false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Test, \"xl3rchD9GmDS/4TbQdci2Rihygo=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useState","TransformComponent","TransformWrapper","Townbox","descData","svgData","Map","Test","scale","setScale","height","setHeight","select","setSelect","display","setDisplay","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","close","console","log","disabled","resetTransform","setTransform","groupArray","map","selectedArea","descriptionArray","find","x","id","headerText","captionText","headerColor","showButton"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useState } from 'react'\nimport { TransformComponent, TransformWrapper } from 'react-zoom-pan-pinch'\n//import { Location } from '../../lib/types'\nimport { Townbox, TownboxProps } from '../Townbox'\n//import mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport './index.css'\nimport svgData from './svgImageData.json'\nimport Map from './Map'\n//import internal from 'stream'\n\ntype HeaderColor = 'primary' | 'orange'\n\ninterface mytest {\n  headerColor: any;\n  headerText: string;\n  captionText: string;\n  showButton: boolean;\n}\n\n\nconst Test: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [scale, setScale] = useState(1)\n  const [height, setHeight] = useState(1)\n  const [select, setSelect] = useState(null)\n  const [display, setDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  // const getAreaDescription = (area: Location) => {\n  //   for (const place of descData.descriptionArray) {\n  //     if (place.id === Location[area]) {\n  //       return place\n  //     }\n  //   }\n  //   return null\n  // }\n\n  const close = () => {\n    setSelect(null)\n    setDisplay(false)\n  }\n\n  if (height) {\n    console.log('height')\n  }\n\n  // const selectArea = (area: Location) => {\n  //   selected === area ? setSelect(null) : setSelect(area)\n  //   setDisplay(!display)\n  // }\n\n  // const handleClick = (\n  //   event: any,\n  //   setTransform: any,\n  //   xtrans: number,\n  //   ytrans: number\n  // ) => {\n  //   //need to change this type\n  //   event.preventDefault()\n  //   const area = event.target.alt\n  //   selectArea(Location[area as keyof typeof Location])\n  //   setTransform(xtrans, ytrans, 2)\n  // }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <>\n      <div>\n        <TransformWrapper\n          doubleClick={{ disabled: true }}\n          wheel={{ disabled: true }}\n          initialScale={1}\n        >\n          {({ resetTransform, setTransform }) => (\n            <>\n              <TransformComponent>\n                <Map\n                  scale={scale}\n                  setTransform={setTransform}\n                  setHeight={setHeight}\n                  setDisplay={setDisplay}\n                  display={display}\n                  setSelect={setSelect}\n                  selected={select}\n                />\n              </TransformComponent>\n\n\n              <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                {svgData.groupArray.map(() => {\n                  if (select) {\n                    const selectedArea = descData.descriptionArray.find(\n                      x => x.id === select\n                    )\n\n                    if (selectedArea) {\n                      const {headerText, captionText, headerColor, showButton} : mytest | undefined = selectedArea\n\n                      return (\n                        <>\n                          <div key='test' className='townbox-wrapper'>\n                            <Townbox\n                              headerColor={\n                                headerColor as HeaderColor\n                              }\n                              headerText={headerText}\n                              captionText={captionText}\n                              showButton={showButton}\n                              close={() => {\n                                close()\n                                resetTransform()\n                              }}\n                            />\n                          </div>\n                        </>\n                      )\n                    }\n                  }\n                })}\n              </div>\n            </>\n          )}\n        </TransformWrapper>\n      </div>\n    </>\n  )\n}\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}