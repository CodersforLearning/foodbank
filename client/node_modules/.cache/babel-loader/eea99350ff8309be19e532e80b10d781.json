{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/timothy/foodbank/client/src/Components/Map/index.tsx\",\n    _s = $RefreshSig$();\n\n// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\nimport React, { useEffect, useRef, useState } from 'react';\nimport './index.css';\nimport { Location } from '../../lib/types';\nimport svgData from './svgImageData.json';\nimport mapImg from './assets/TuckerMap.jpg';\nimport descData from './assets/description.json';\nimport Townbox from '../Townbox';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'; //import internal from 'stream'\n\nconst Map = () => {\n  _s();\n\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1);\n  const elementRef = useRef(null);\n  const [selected, setSelect] = useState(null);\n  const [scale, setScale] = useState(1);\n  const [display, setDisplay] = useState(false); // const [townbox, setTownbox] = useState(<></>)\n\n  useEffect(() => {\n    var _elementRef$current;\n\n    if (elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.clientHeight) {\n      var _elementRef$current2;\n\n      setHeight(elementRef === null || elementRef === void 0 ? void 0 : (_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.clientHeight);\n    }\n  }, []); //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900;\n      const minStaticWidth = 1170;\n      const targetWidth = window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth;\n      setScale(targetWidth / 4961);\n    }\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, []); // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n\n  const getAreaDescription = area => {\n    const test = descData.descriptionArray.find(area);\n\n    for (const place of descData.descriptionArray) {\n      if (place.id === Location[area]) {\n        return place;\n      }\n    }\n\n    return null;\n  };\n\n  const close = () => {\n    setSelect(null);\n    setDisplay(false);\n  };\n\n  const selectArea = area => {\n    selected === area ? setSelect(null) : setSelect(area);\n    setDisplay(true);\n  };\n\n  const handleClick = (event, setTransform, xtrans, ytrans) => {\n    //need to change this type\n    event.preventDefault();\n    const area = event.target.alt;\n    selectArea(Location[area]);\n    setTransform(xtrans, ytrans, 2);\n  }; // Data can be made from dev/svgParse.py\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TransformWrapper, {\n        doubleClick: {\n          disabled: true\n        },\n        wheel: {\n          disabled: true\n        },\n        initialScale: 1,\n        children: ({\n          resetTransform,\n          setTransform\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TransformComponent, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: elementRef,\n              className: \"block w-full min-h-full items-stretch\",\n              style: {\n                minHeight: '900px'\n              },\n              children: height === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"svgrow\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: mapImg,\n                  alt: \"Tucker Island Map\",\n                  useMap: \"#tuckerislandmap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n                  name: \"tuckerislandmap\",\n                  children: svgData.groupArray.map(location => {\n                    if (location.coords) {\n                      // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n                      // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                      // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                      //scaling by 10 seems to give better views of the locations\n                      const xtrans = parseInt(location.xtrans) * scale * 10;\n                      const ytrans = parseInt(location.ytrans) * scale * 10;\n                      const scaledCoords = location.coords.map(coord => coord * scale);\n                      const className = Location[location.id] === selected ? 'map-selected' : 'map-unselected';\n                      return /*#__PURE__*/_jsxDEV(\"area\", {\n                        alt: location.id,\n                        onClick: e => {\n                          handleClick(e, setTransform, -xtrans, -ytrans);\n                        },\n                        href: location.id,\n                        coords: scaledCoords.join(),\n                        className: className,\n                        shape: \"poly\"\n                      }, location.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 120,\n                        columnNumber: 31\n                      }, this);\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `full-page-wrapper ${display ? '' : 'none'}`,\n            children: svgData.groupArray.map(area => {\n              if (selected !== null && area.coords) {\n                const selectedArea = getAreaDescription(selected);\n\n                if (selectedArea !== null && selectedArea.id === area.id) {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"townbox-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(Townbox, {\n                        headerColor: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerColor,\n                        headerText: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.headerText,\n                        captionText: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.captionText,\n                        showButton: selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.showButton,\n                        close: () => {\n                          close();\n                          resetTransform();\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 152,\n                        columnNumber: 29\n                      }, this)\n                    }, selectedArea.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 148,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false);\n                }\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Map, \"ipZTJZb8bxFajCFaxHwFiK2ctZ4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/timothy/foodbank/client/src/Components/Map/index.tsx"],"names":["React","useEffect","useRef","useState","Location","svgData","mapImg","descData","Townbox","TransformWrapper","TransformComponent","Map","height","setHeight","elementRef","selected","setSelect","scale","setScale","display","setDisplay","current","clientHeight","handleResize","mobileWidth","minStaticWidth","targetWidth","window","innerWidth","addEventListener","getAreaDescription","area","test","descriptionArray","find","place","id","close","selectArea","handleClick","event","setTransform","xtrans","ytrans","preventDefault","target","alt","disabled","resetTransform","minHeight","groupArray","map","location","coords","parseInt","scaledCoords","coord","className","e","join","selectedArea","headerColor","headerText","captionText","showButton"],"mappings":"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","sourcesContent":["// naming conventions of items in svg = id of group in camelCase, image import name in PascalCase.\n// svg tree generated from dev/svgParse.py (super hacky atm)\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport './index.css'\nimport { Location } from '../../lib/types'\nimport svgData from './svgImageData.json'\nimport mapImg from './assets/TuckerMap.jpg'\nimport descData from './assets/description.json'\nimport Townbox from '../Townbox'\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'\n//import internal from 'stream'\n\nconst Map: React.FC = () => {\n  // Used because SVG does not scale properly without\n  const [height, setHeight] = useState(1)\n  const elementRef = useRef(null as null | HTMLDivElement)\n  const [selected, setSelect] = useState<Location | null>(null)\n  const [scale, setScale] = useState(1)\n  const [display, setDisplay] = useState(false)\n  // const [townbox, setTownbox] = useState(<></>)\n  type HeaderColor = 'primary' | 'orange'\n  useEffect(() => {\n    if (elementRef?.current?.clientHeight) {\n      setHeight(elementRef?.current?.clientHeight)\n    }\n  }, []) //empty dependency array so it only runs once at render\n\n  useEffect(() => {\n    function handleResize() {\n      const mobileWidth = 2900\n      const minStaticWidth = 1170\n      const targetWidth =\n        window.innerWidth > minStaticWidth ? window.innerWidth : mobileWidth\n      setScale(targetWidth / 4961)\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  }, [])\n\n  // to get the area description given an area so you can actually use headers/captions\n  // returns null if such area doesn't exist in assets/description.json\n  const getAreaDescription = (area: Location) => {\n    const test = descData.descriptionArray.find(area)\n    for (const place of descData.descriptionArray) {\n      if (place.id === Location[area]) {\n        return place\n      }\n    }\n    return null\n  }\n  const close = () => {\n    setSelect(null)\n    setDisplay(false)\n  }\n  const selectArea = (area: Location) => {\n    selected === area ? setSelect(null) : setSelect(area)\n    setDisplay(true)\n  }\n\n  const handleClick = (\n    event: any,\n    setTransform: any,\n    xtrans: number,\n    ytrans: number\n  ) => {\n    //need to change this type\n    event.preventDefault()\n    const area = event.target.alt\n    selectArea(Location[area as keyof typeof Location])\n    setTransform(xtrans, ytrans, 2)\n  }\n\n  // Data can be made from dev/svgParse.py\n  return (\n    <>\n      <div>\n        <TransformWrapper\n          doubleClick={{ disabled: true }}\n          wheel={{ disabled: true }}\n          initialScale={1}\n        >\n          {({ resetTransform, setTransform }) => (\n            <>\n              <TransformComponent>\n                <div\n                  ref={elementRef}\n                  className='block w-full min-h-full items-stretch'\n                  style={{ minHeight: '900px' }}\n                >\n                  {height === 0 ? null : (\n                    <div className='svgrow'>\n                      <img\n                        src={mapImg}\n                        alt='Tucker Island Map'\n                        useMap='#tuckerislandmap'\n                      />\n\n                      <map name='tuckerislandmap'>\n                        {svgData.groupArray.map(location => {\n                          if (location.coords) {\n                            // CHECK SCALING OF ENTIRE IMAGE TO SCREEN\n                            // Seems to need to be scaled because the image map is not the same size as what is actually displayed.\n                            // eg. the image is actually at the top left of the screen and is significantly smaller than what is actually shown\n                            //scaling by 10 seems to give better views of the locations\n                            const xtrans =\n                              parseInt(location.xtrans) * scale * 10\n                            const ytrans =\n                              parseInt(location.ytrans) * scale * 10\n\n                            const scaledCoords = location.coords.map(\n                              coord => coord * scale\n                            )\n                            const className =\n                              Location[location.id as keyof typeof Location] ===\n                              selected\n                                ? 'map-selected'\n                                : 'map-unselected'\n                            return (\n                              <area\n                                key={location.id}\n                                alt={location.id}\n                                onClick={e => {\n                                  handleClick(e, setTransform, -xtrans, -ytrans)\n                                }}\n                                href={location.id}\n                                coords={scaledCoords.join()}\n                                className={className}\n                                shape='poly'\n                              />\n                            )\n                          }\n                        })}\n                      </map>\n                    </div>\n                  )}\n                </div>\n              </TransformComponent>\n\n              <div className={`full-page-wrapper ${display ? '' : 'none'}`}>\n                {svgData.groupArray.map(area => {\n                  if (selected !== null && area.coords) {\n                    const selectedArea = getAreaDescription(selected)\n\n                    if (selectedArea !== null && selectedArea.id === area.id) {\n                      return (\n                        <>\n                          <div\n                            key={selectedArea.id}\n                            className='townbox-wrapper'\n                          >\n                            <Townbox\n                              headerColor={selectedArea?.headerColor as HeaderColor}\n                              headerText={selectedArea?.headerText}\n                              captionText={selectedArea?.captionText}\n                              showButton={selectedArea?.showButton}\n                              close={() => {\n                                close()\n                                resetTransform()\n                              }}\n                            />\n                          </div>\n                        </>\n                      )\n                    }\n                  }\n                })}\n              </div>\n            </>\n          )}\n        </TransformWrapper>\n      </div>\n    </>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}